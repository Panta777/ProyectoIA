{"id":"9aea","dependencies":[{"name":"/home/panta/appsAngular/tfjs-examples/boston-housing/.babelrc","includedInParent":true,"mtime":1540769629125},{"name":"/home/panta/appsAngular/tfjs-examples/boston-housing/package.json","includedInParent":true,"mtime":1540875774882},{"name":"@tensorflow/tfjs","loc":{"line":18,"column":20},"parent":"/home/panta/appsAngular/tfjs-examples/boston-housing/normalization.js","resolved":"/home/panta/appsAngular/tfjs-examples/boston-housing/node_modules/@tensorflow/tfjs/dist/tf.esm.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.determineMeanAndStddev = determineMeanAndStddev;\nexports.normalizeTensor = normalizeTensor;\n\nvar tf = _interopRequireWildcard(require(\"@tensorflow/tfjs\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Calculates the mean and standard deviation of each column of a data array.\n *\n * @param {Tensor2d} data Dataset from which to calculate the mean and\n *                        std of each column independently.\n *\n * @returns {Object} Contains the mean and standard deviation of each vector\n *                   column as 1d tensors.\n */\nfunction determineMeanAndStddev(data) {\n  const dataMean = data.mean(0); // TODO(bileschi): Simplify when and if tf.var / tf.std added to the API.\n\n  const diffFromMean = data.sub(dataMean);\n  const squaredDiffFromMean = diffFromMean.square();\n  const variance = squaredDiffFromMean.mean(0);\n  const dataStd = variance.sqrt();\n  return {\n    dataMean,\n    dataStd\n  };\n}\n/**\n * Given expected mean and standard deviation, normalizes a dataset by\n * subtracting the mean and dividing by the standard deviation.\n *\n * @param {Tensor2d} data: Data to normalize. Shape: [batch, numFeatures].\n * @param {Tensor1d} dataMean: Expected mean of the data. Shape [numFeatures].\n * @param {Tensor1d} dataStd: Expected std of the data. Shape [numFeatures]\n *\n * @returns {Tensor2d}: Tensor the same shape as data, but each column\n * normalized to have zero mean and unit standard deviation.\n */\n\n\nfunction normalizeTensor(data, dataMean, dataStd) {\n  return data.sub(dataMean).div(dataStd);\n}","map":{"mappings":[{"generated":{"line":9,"column":0},"source":"normalization.js","original":{"line":18,"column":0}},{"generated":{"line":13,"column":0},"source":"normalization.js","original":{"line":1,"column":0}},{"generated":{"line":30,"column":0},"source":"normalization.js","original":{"line":20,"column":0}},{"generated":{"line":39,"column":0},"source":"normalization.js","original":{"line":29,"column":7}},{"name":"determineMeanAndStddev","generated":{"line":39,"column":9},"source":"normalization.js","original":{"line":29,"column":16}},{"generated":{"line":39,"column":31},"source":"normalization.js","original":{"line":29,"column":7}},{"name":"data","generated":{"line":39,"column":32},"source":"normalization.js","original":{"line":29,"column":39}},{"generated":{"line":39,"column":36},"source":"normalization.js","original":{"line":29,"column":7}},{"generated":{"line":39,"column":38},"source":"normalization.js","original":{"line":29,"column":45}},{"generated":{"line":40,"column":0},"source":"normalization.js","original":{"line":30,"column":2}},{"name":"dataMean","generated":{"line":40,"column":8},"source":"normalization.js","original":{"line":30,"column":8}},{"generated":{"line":40,"column":16},"source":"normalization.js","original":{"line":30,"column":16}},{"name":"data","generated":{"line":40,"column":19},"source":"normalization.js","original":{"line":30,"column":19}},{"generated":{"line":40,"column":23},"source":"normalization.js","original":{"line":30,"column":23}},{"name":"mean","generated":{"line":40,"column":24},"source":"normalization.js","original":{"line":30,"column":24}},{"generated":{"line":40,"column":28},"source":"normalization.js","original":{"line":30,"column":19}},{"generated":{"line":40,"column":29},"source":"normalization.js","original":{"line":30,"column":29}},{"generated":{"line":40,"column":30},"source":"normalization.js","original":{"line":30,"column":19}},{"generated":{"line":40,"column":31},"source":"normalization.js","original":{"line":30,"column":2}},{"generated":{"line":40,"column":32},"source":"normalization.js","original":{"line":29,"column":45}},{"generated":{"line":40,"column":33},"source":"normalization.js","original":{"line":31,"column":2}},{"generated":{"line":42,"column":0},"source":"normalization.js","original":{"line":32,"column":2}},{"name":"diffFromMean","generated":{"line":42,"column":8},"source":"normalization.js","original":{"line":32,"column":8}},{"generated":{"line":42,"column":20},"source":"normalization.js","original":{"line":32,"column":20}},{"name":"data","generated":{"line":42,"column":23},"source":"normalization.js","original":{"line":32,"column":23}},{"generated":{"line":42,"column":27},"source":"normalization.js","original":{"line":32,"column":27}},{"name":"sub","generated":{"line":42,"column":28},"source":"normalization.js","original":{"line":32,"column":28}},{"generated":{"line":42,"column":31},"source":"normalization.js","original":{"line":32,"column":23}},{"name":"dataMean","generated":{"line":42,"column":32},"source":"normalization.js","original":{"line":32,"column":32}},{"generated":{"line":42,"column":40},"source":"normalization.js","original":{"line":32,"column":23}},{"generated":{"line":42,"column":41},"source":"normalization.js","original":{"line":32,"column":2}},{"generated":{"line":43,"column":0},"source":"normalization.js","original":{"line":33,"column":2}},{"name":"squaredDiffFromMean","generated":{"line":43,"column":8},"source":"normalization.js","original":{"line":33,"column":8}},{"generated":{"line":43,"column":27},"source":"normalization.js","original":{"line":33,"column":27}},{"name":"diffFromMean","generated":{"line":43,"column":30},"source":"normalization.js","original":{"line":33,"column":30}},{"generated":{"line":43,"column":42},"source":"normalization.js","original":{"line":33,"column":42}},{"name":"square","generated":{"line":43,"column":43},"source":"normalization.js","original":{"line":33,"column":43}},{"generated":{"line":43,"column":49},"source":"normalization.js","original":{"line":33,"column":30}},{"generated":{"line":43,"column":51},"source":"normalization.js","original":{"line":33,"column":2}},{"generated":{"line":44,"column":0},"source":"normalization.js","original":{"line":34,"column":2}},{"name":"variance","generated":{"line":44,"column":8},"source":"normalization.js","original":{"line":34,"column":8}},{"generated":{"line":44,"column":16},"source":"normalization.js","original":{"line":34,"column":16}},{"name":"squaredDiffFromMean","generated":{"line":44,"column":19},"source":"normalization.js","original":{"line":34,"column":19}},{"generated":{"line":44,"column":38},"source":"normalization.js","original":{"line":34,"column":38}},{"name":"mean","generated":{"line":44,"column":39},"source":"normalization.js","original":{"line":34,"column":39}},{"generated":{"line":44,"column":43},"source":"normalization.js","original":{"line":34,"column":19}},{"generated":{"line":44,"column":44},"source":"normalization.js","original":{"line":34,"column":44}},{"generated":{"line":44,"column":45},"source":"normalization.js","original":{"line":34,"column":19}},{"generated":{"line":44,"column":46},"source":"normalization.js","original":{"line":34,"column":2}},{"generated":{"line":45,"column":0},"source":"normalization.js","original":{"line":35,"column":2}},{"name":"dataStd","generated":{"line":45,"column":8},"source":"normalization.js","original":{"line":35,"column":8}},{"generated":{"line":45,"column":15},"source":"normalization.js","original":{"line":35,"column":15}},{"name":"variance","generated":{"line":45,"column":18},"source":"normalization.js","original":{"line":35,"column":18}},{"generated":{"line":45,"column":26},"source":"normalization.js","original":{"line":35,"column":26}},{"name":"sqrt","generated":{"line":45,"column":27},"source":"normalization.js","original":{"line":35,"column":27}},{"generated":{"line":45,"column":31},"source":"normalization.js","original":{"line":35,"column":18}},{"generated":{"line":45,"column":33},"source":"normalization.js","original":{"line":35,"column":2}},{"generated":{"line":46,"column":0},"source":"normalization.js","original":{"line":36,"column":2}},{"generated":{"line":46,"column":9},"source":"normalization.js","original":{"line":36,"column":9}},{"name":"dataMean","generated":{"line":47,"column":0},"source":"normalization.js","original":{"line":36,"column":10}},{"name":"dataMean","generated":{"line":47,"column":4},"source":"normalization.js","original":{"line":36,"column":10}},{"generated":{"line":47,"column":12},"source":"normalization.js","original":{"line":36,"column":9}},{"name":"dataStd","generated":{"line":48,"column":0},"source":"normalization.js","original":{"line":36,"column":20}},{"name":"dataStd","generated":{"line":48,"column":4},"source":"normalization.js","original":{"line":36,"column":20}},{"generated":{"line":49,"column":0},"source":"normalization.js","original":{"line":36,"column":9}},{"generated":{"line":49,"column":3},"source":"normalization.js","original":{"line":36,"column":2}},{"generated":{"line":50,"column":0},"source":"normalization.js","original":{"line":37,"column":1}},{"generated":{"line":51,"column":0},"source":"normalization.js","original":{"line":39,"column":0}},{"generated":{"line":64,"column":0},"source":"normalization.js","original":{"line":50,"column":7}},{"name":"normalizeTensor","generated":{"line":64,"column":9},"source":"normalization.js","original":{"line":50,"column":16}},{"generated":{"line":64,"column":24},"source":"normalization.js","original":{"line":50,"column":7}},{"name":"data","generated":{"line":64,"column":25},"source":"normalization.js","original":{"line":50,"column":32}},{"generated":{"line":64,"column":29},"source":"normalization.js","original":{"line":50,"column":7}},{"name":"dataMean","generated":{"line":64,"column":31},"source":"normalization.js","original":{"line":50,"column":38}},{"generated":{"line":64,"column":39},"source":"normalization.js","original":{"line":50,"column":7}},{"name":"dataStd","generated":{"line":64,"column":41},"source":"normalization.js","original":{"line":50,"column":48}},{"generated":{"line":64,"column":48},"source":"normalization.js","original":{"line":50,"column":7}},{"generated":{"line":64,"column":50},"source":"normalization.js","original":{"line":50,"column":57}},{"generated":{"line":65,"column":0},"source":"normalization.js","original":{"line":51,"column":2}},{"name":"data","generated":{"line":65,"column":9},"source":"normalization.js","original":{"line":51,"column":9}},{"generated":{"line":65,"column":13},"source":"normalization.js","original":{"line":51,"column":13}},{"name":"sub","generated":{"line":65,"column":14},"source":"normalization.js","original":{"line":51,"column":14}},{"generated":{"line":65,"column":17},"source":"normalization.js","original":{"line":51,"column":9}},{"name":"dataMean","generated":{"line":65,"column":18},"source":"normalization.js","original":{"line":51,"column":18}},{"generated":{"line":65,"column":26},"source":"normalization.js","original":{"line":51,"column":9}},{"name":"div","generated":{"line":65,"column":28},"source":"normalization.js","original":{"line":51,"column":28}},{"generated":{"line":65,"column":31},"source":"normalization.js","original":{"line":51,"column":9}},{"name":"dataStd","generated":{"line":65,"column":32},"source":"normalization.js","original":{"line":51,"column":32}},{"generated":{"line":65,"column":39},"source":"normalization.js","original":{"line":51,"column":9}},{"generated":{"line":65,"column":40},"source":"normalization.js","original":{"line":51,"column":2}},{"generated":{"line":66,"column":0},"source":"normalization.js","original":{"line":52,"column":1}}],"sources":{"normalization.js":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\n\n/**\n * Calculates the mean and standard deviation of each column of a data array.\n *\n * @param {Tensor2d} data Dataset from which to calculate the mean and\n *                        std of each column independently.\n *\n * @returns {Object} Contains the mean and standard deviation of each vector\n *                   column as 1d tensors.\n */\nexport function determineMeanAndStddev(data) {\n  const dataMean = data.mean(0);\n  // TODO(bileschi): Simplify when and if tf.var / tf.std added to the API.\n  const diffFromMean = data.sub(dataMean);\n  const squaredDiffFromMean = diffFromMean.square();\n  const variance = squaredDiffFromMean.mean(0);\n  const dataStd = variance.sqrt();\n  return {dataMean, dataStd};\n}\n\n/**\n * Given expected mean and standard deviation, normalizes a dataset by\n * subtracting the mean and dividing by the standard deviation.\n *\n * @param {Tensor2d} data: Data to normalize. Shape: [batch, numFeatures].\n * @param {Tensor1d} dataMean: Expected mean of the data. Shape [numFeatures].\n * @param {Tensor1d} dataStd: Expected std of the data. Shape [numFeatures]\n *\n * @returns {Tensor2d}: Tensor the same shape as data, but each column\n * normalized to have zero mean and unit standard deviation.\n */\nexport function normalizeTensor(data, dataMean, dataStd) {\n  return data.sub(dataMean).div(dataStd);\n}\n"},"lineCount":null}},"hash":"a4309553fb0781a655a1d55fe3c6ad37","cacheData":{"env":{}}}